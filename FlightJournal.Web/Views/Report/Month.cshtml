@using FlightJournal.Web.Extensions
@model FlightJournal.Web.Models.ReportViewModel
@{
    ViewBag.Title = "Månedsrapport";
    var root = "/";
    if (Request.IsClub())
    {
        // When root Action has problems identifying that the date is allready part of the path
        root = Url.Action("Index", "Report");
    }
}
<p>
    <div class="btn-group">
        <a href="@Path.Combine(root, Model.Date.ToString("yyyy"))" class="btn btn-default">@Model.Date.ToString("yyyy")</a>
        <a href="@Path.Combine(root, Model.Date.AddMonths(-1).ToString("yyyy-MM"))" class="btn btn-default">@Model.Date.AddMonths(-1).ToString("MMMM")</a>
        <a href="@Path.Combine(root, Model.Date.ToString("yyyy-MM"))" class="btn btn-info"><span class="glyphicon glyphicon-stats"></span> <strong>@Model.Date.ToString("MMMM")</strong></a>
        @if (DateTime.Today > Model.Date.AddMonths(1))
        {
            <a href="@Path.Combine(root, Model.Date.AddMonths(1).ToString("yyyy-MM"))" class="btn btn-default">@Model.Date.AddMonths(1).ToString("MMMM")</a>
        }
        @if (DateTime.Today.Year >= Model.Date.AddYears(1).Year)
        {
            <a href="@Path.Combine(root, Model.Date.AddYears(1).ToString("yyyy"))" class="btn btn-default">@Model.Date.AddYears(1).ToString("yyyy")</a>
        }
    </div>
    <a href="@Url.Action("Export", "Report", new { year = Model.Date.Year, month = Model.Date.Month })" class="btn btn-info pull-right"><span class="glyphicon glyphicon-cloud-download"></span> Eksporter startlisten for @Model.Date.ToString("MMMM yyyy")</a>
</p>

<h2>
    Statistik for @Model.Date.ToString("MMMM yyyy")</h2>
@{
    var dateCount = Model.Flights.Select(s => s.Date).Distinct().Count();
    var dates = Model.Flights.Select(s => s.Date).Distinct();
}
<table class="table table-condensed table-striped ">
    <tr>
        <td>
            Flyvedage
        </td>
        <td align="right">@Model.Flights.Select(s => s.Date).Distinct().Count()</td>
        
        @foreach (var source in dates)
        {
            <td align="right">
                <a href="/@source.ToString("yyyy-MM-dd")">
                    @if (dateCount > 10)
                    {
                        @source.ToString("dd")
                    }
                    else if (dateCount > 5)
                    {
                        @source.ToString("M")
                    }
                    else
                    {
                        @source.ToString("d")
                    }
                </a>
            </td>
        }
    </tr>
    <tr>
        <td>
            Starter
        </td>
        <td align="right">@Model.Flights.Count()</td>
        @foreach (var date in dates)
        {
            <td align="right">
                @Model.Flights.Count(d => d.Date == date)
            </td>
        }
    </tr>
    @{
        var time = new TimeSpan(@Model.Flights.ToList()
                .Select(f => new { myTime = f.Landing.HasValue && f.Departure.HasValue && f.Landing.Value > f.Departure.Value ? f.Landing.Value.Subtract(f.Departure.Value).Ticks : (long)0 })
                .Sum(f => f.myTime));
    }
    <tr>
        <td>
            Flyvetid
        </td>
        <td align="right">
            @(time.TotalHoursWithMinutesAsDecimal())
        </td>
        @foreach (var date in dates)
        {
            var separateTime = new TimeSpan(@Model.Flights.Where(d => d.Date == date).ToList()
                .Select(f => new { myTime = f.Landing.HasValue && f.Departure.HasValue && f.Landing.Value > f.Departure.Value ? f.Landing.Value.Subtract(f.Departure.Value).Ticks : (long)0 })
                .Sum(f => f.myTime));
            <td align="right">
                @(separateTime.TotalHoursWithMinutesAsDecimal())
            </td>
        }
    </tr>
    <tr>
        <td>
            Piloter
        </td>
        <td align="right">@Model.Flights.Select(s => s.Pilot).Union(Model.Flights.Where(s => s.PilotBackseat != null).Select(s => s.PilotBackseat).Distinct()).Distinct().Count()</td>
        @foreach (var date in dates)
        {
            <td align="right">
                @Model.Flights.Where(s => s.Date == date).Select(s => s.Pilot).Union(Model.Flights.Where(s => s.Date == date && s.PilotBackseat != null).Select(s => s.PilotBackseat).Distinct()).Distinct().Count()
            </td>
        }
    </tr>
    <tr>
        <td>
            Stræk opgaver
        </td>
        <td align="right">@Model.Flights.Count(w => w.TaskDistance.HasValue && w.TaskDistance.Value > 0)
        </td>
        @foreach (var date in dates)
        {
            <td align="right">
                @Model.Flights.Count(w => w.Date == date && w.TaskDistance.HasValue && w.TaskDistance.Value > 0)
            </td>
        }
    </tr>
    <tr>
        <td>
            Stræk Km
        </td>
        <td align="right">@Model.Flights.Where(w => w.TaskDistance.HasValue && w.TaskDistance.Value > 0).Sum(d => d.TaskDistance)
        </td>
        @foreach (var date in dates)
        {
            <td align="right">
                @Model.Flights.Where(w => w.Date == date && w.TaskDistance.HasValue && w.TaskDistance.Value > 0).Sum(d => d.TaskDistance)
            </td>
        }
    </tr>
</table>

<h2>
    Logbøger for @Model.Date.ToString("MMMM yyyy")</h2>

<div class="row">
    
        <div class="col-md-6">
            <table class="tablesorter table table-striped table-hover table-condensed">
                <thead>
                    <tr>
                        <th>
                            Fly
                        </th>
                        <th>
                            Forsæde
                        </th>
                        <th>
                            Antal
                        </th>
                        <th>
                            Flyvetid
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in from c in Model.Flights
                                         group c by new { c.Pilot, c.Plane } into g
                                         select new { Plane = g.Key.Plane, Pilot = g.Key.Pilot, Count = g.Count(), ItemFlights = g })
                    {
                        <tr>
                            <td>
                                @item.Plane
                            </td>
                            <td>
                                @item.Pilot.Name
                            </td>
                            <td align="right">
                                @item.Count
                            </td>
                            <td align="right">
                                @(new TimeSpan(item.ItemFlights
                                .Select(f => new { myTime = f.Landing.HasValue && f.Departure.HasValue && f.Landing.Value > f.Departure.Value ? f.Landing.Value.Subtract(f.Departure.Value).Ticks : (long)0 })
                                .Sum(f => f.myTime)).TotalHoursWithMinutesAsDecimal())
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-hover table-condensed">
            <thead>
                <tr>
                    <th>
                        Fly
                    </th>
                    <th>
                        Bagsæde
                    </th>
                    <th>
                        Antal
                    </th>
                    <th>
                        Flyvetid
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in Model.Flights
                                     where c.PilotBackseat != null
                                     group c by new { c.Plane, c.PilotBackseat } into g
                                     select new { Plane = g.Key.Plane, PilotBackseat = g.Key.PilotBackseat, Count = g.Count(), ItemFlights = g })
                {
                    <tr>
                        <td>
                            @item.Plane
                        </td>
                        <td>
                            @item.PilotBackseat.Name
                        </td>
                        <td align="right">
                            @item.Count
                        </td>
                        <td align="right">
                            @(new TimeSpan(item.ItemFlights
                                .Select(f => new { myTime = f.Landing.HasValue && f.Departure.HasValue && f.Landing.Value > f.Departure.Value ? f.Landing.Value.Subtract(f.Departure.Value).Ticks : (long)0 })
                                .Sum(f => f.myTime)).TotalHoursWithMinutesAsDecimal())
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
        </div>

        <div class="text-center hidden-print">
            <a href="@Url.Action("Export", "Report", new { year = Model.Date.Year, month = Model.Date.Month })" class="btn btn-info"><span class="glyphicon glyphicon-cloud-download"></span> Eksporter startlisten for @Model.Date.ToString("MMMM yyyy")</a>
        </div>
        <br style="page-break-after: always;" />
        <h2>
            Startlister for @Model.Date.ToString("MMMM yyyy")
        </h2>
        <table class="tablesorter table table-responsive table-striped table-hover table-condensed">
            <thead>
                <tr>
                    <th>
                        Dato
                    </th>
                    <th>
                        Fly
                    </th>
                    <th>
                        Pilote(r)
                    </th>
                    <th>
                        Start
                    </th>
                    <th>
                        Landing
                    </th>
                    <th>
                        Flyvetid
                    </th>
                    <th class="hidden-sm">
                        Flyveplads
                    </th>
                    <th class="hidden-sm">
                        Tacho
                    </th>
                    <th class="hidden-xs">
                        Note
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Flights)
                {
                    <tr>
                        <td>
                            @item.Date.ToShortDateString()
                        </td>
                        <td>
                            @item.Plane
                        </td>
                        <td>
                            @item.Pilot.Name
                            @if (item.PilotBackseat != null)
                            {
                                <text> / </text>@item.PilotBackseat.Name
                            }
                            @if ((item.Betaler != null) && (item.Betaler != item.Pilot))
                            {
                                <text> (</text>@item.Betaler.Name<text> betaler)</text>
                            }
                        </td>
                        <td>
                            @if (item.Departure.HasValue)
                            {
                                @item.Departure.Value.ToString("HH:mm");
                            }
                        </td>
                        <td>
                            @if (item.Landing.HasValue)
                            {
                                @item.Landing.Value.ToString("HH:mm");
                            }
                        </td>
                        <td>
                            @if (item.Departure != null && item.Landing != null && item.Landing.Value > item.Departure.Value)
                            {
                                @((new TimeSpan((item.Landing.Value - item.Departure.Value).Ticks)).TotalHoursWithMinutesAsDecimal());
                            }
                        </td>
                        <td class="hidden-sm">
                            @item.StartedFrom.Name
                            @if ((item.LandedOn != null) && (item.LandedOn.Name != item.StartedFrom.Name))
                            {
                                <text>, </text>
                                @item.LandedOn.Name
                            }
                        </td>
                        <td class="hidden-sm">
                            @Html.Partial("DisplayTemplates/_TachoPartial", item)
                        </td>
                        <td class="hidden-xs">
                            @Html.DisplayFor(modelItem => item.Description, "Description")
                        </td>
                        <td>
                            @Html.ActionLink("Detaljer", "Details", "Flight", new { id = item.FlightId }, new { @class = "btn btn-info" })
                            @*@Html.ActionLink("Historik", "ChangeHistory", "Flight", new { id = item.FlightId }, new { @class = "awesomeBtn" })*@
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @section scripts
{
            <script type="text/javascript">
                $(document).ready(function () {
                    $(".tablesorter").tablesorter();
                }
                );
            </script>
        }

