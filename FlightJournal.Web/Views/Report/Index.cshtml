@using FlightJournal.Web
@using FlightJournal.Web.Controllers
@using FlightJournal.Web.Extensions
@model FlightJournal.Web.Models.ReportViewModel
@{
    ViewBag.Title = "Dagsrapporter";

}

@section head
{
    <style>
        .termik {
            font-weight: bold;
            background-color: Lime;
        }
    </style>
}

@section scripts
{
    <script type="text/javascript">

        $(document).ready(function () {

            function available(date) {
                dmy = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
                @if (Model.AvailableDates != null)
            {
                foreach (var item in Model.AvailableDates.Keys)
                {
                <text>if (dmy == "</text>@item.ToString("yyyy-M-d")<text>") return [true, "</text>@((Model.AvailableDates[item] > 20) ? "termik" : "")<text>", "</text>@Model.AvailableDates[item]<text> starter."];</text>
                }
            }
                return [false, "", "ingen flyvning"];
            }

            function selectDate(dmy) {
                // Redirect page to date report
                @if (!Request.IsClub() || string.IsNullOrWhiteSpace(Request.Club().ShortName))
            {
                <text>location = '/' + dmy;</text>
            }else{
                <text>location = '/@Server.UrlPathEncode(Request.Club().ShortName)/' + dmy;</text>
            }
            }

            $("#datepicker").datepicker({
                beforeShowDay: available,
                maxDate: 0,
                showWeek: true,
                numberOfMonths: 4,
                onSelect: selectDate,
                firstDay: 1,
                weekHeader: 'Uge',
                dateFormat: "yy-mm-dd",
                dayNamesMin: ['Sø', 'Ma', 'Ti', 'On', 'To', 'Fr', 'Lø']
            });

            $("#datepickertablet").datepicker({
                beforeShowDay: available,
                maxDate: 0,
                showWeek: true,
                numberOfMonths: 2,
                onSelect: selectDate,
                firstDay: 1,
                weekHeader: 'Uge',
                dateFormat: "yy-mm-dd",
                dayNamesMin: ['Sø', 'Ma', 'Ti', 'On', 'To', 'Fr', 'Lø']
            });

            $("#datepickermobil").datepicker({
                beforeShowDay: available,
                maxDate: 0,
                showWeek: true,
                numberOfMonths: 1,
                onSelect: selectDate,
                firstDay: 1,
                weekHeader: 'Uge',
                dateFormat: "yy-mm-dd",
                dayNamesMin: ['Sø', 'Ma', 'Ti', 'On', 'To', 'Fr', 'Lø']
            });


            $("#datepicker").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');
            $("#datepickertablet").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');
            $("#datepickermobil").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');

            $(".tablesorter").tablesorter();
        });
    </script>
}
@*#HACK: for allowing the mobil view to function better we introduce this fix*@
<div align="center" class="hidden-print" style="font-size: 0.82em">
    <div id="datepicker" class="visible-md visible-lg">
    </div>
    <div id="datepickertablet" class="visible-sm" style="margin-top: 60px">
    </div>
    <div id="datepickermobil" class="visible-xs">
    </div>
</div>
<br class="clearfix"/>

@if (Model.DistinctLocations.Count() > 1)
{
    <div class="btn-group">
        @foreach (var item in Model.DistinctLocations)
        {
            <a href="#@item.Name" class="btn btn-default">@item.Name</a>
        }
    </div>
}

@foreach (var location in Model.DistinctLocations)
{
    <a name="@location.Name"></a>
    <h2>
        @location.Name @Model.Date.ToShortDateString() <small>@(Request.IsClub() ? @Request.Club().Name : string.Empty)</small>
    </h2>
    <table class="tablesorter table table-responsive table-striped table-hover table-condensed">
        <thead>
            <tr>
                <th>
                    #
                </th>
                <th>
                    Fly
                </th>
                <th>
                    Pilote(r)
                </th>
                <th>
                    Start
                </th>
                <th class="hidden-xs">
                    Landing
                </th>
                <th>
                    Flyvetid
                </th>
                <th class="hidden-xs hidden-sm">
                    Flyveplads
                </th>
                <th class="hidden-xs hidden-sm">
                    Tacho
                </th>
                <th class="hidden-xs">
                    Note
                </th>
                <th class="hidden-print">
                </th>
            </tr>
        </thead>
        <tbody>
            @{ int startNr = 0; }
            @foreach (var item in Model.Flights.Where(d => d.StartedFromId == location.LocationId))
            {
                <tr>
                    <td>
                        @(++startNr)
                        @if (item.LandingCount > 1)
                        {
                            startNr = startNr + item.LandingCount;
                            <text> - </text> @(startNr)
                        }
                    </td>
                    <td>
                        <span class="hidden-xs">@item.Plane</span>
                        <span class="visible-xs">@item.Plane.CompetitionId</span>
                    </td>
                    <td>
                        @item.Pilot.Name
                        @if (item.PilotBackseat != null)
                        {
                            <text>/ </text>@item.PilotBackseat.Name
                        }
                        @if ((item.Betaler != null) && (item.BetalerId != item.PilotId))
                        {
                            <text> (Anden betaler)</text>
                        }
                        @if ((item.Betaler == null) && (item.Pilot != null))
                        {
                            <text> (mangler betaler) </text>
                        }
                    </td>
                    <td>
                        @if (item.Departure.HasValue)
                        {
                            @item.Departure.Value.ToString("HH:mm");
                        }
                    </td>
                    <td class="hidden-xs">
                        @if (item.Landing.HasValue)
                        {
                            @item.Landing.Value.ToString("HH:mm");
                        }
                    </td>
                    <td>
                        @if (item.Departure.HasValue && item.Landing.HasValue)
                        {
                            if (item.Landing.Value >= item.Departure.Value)
                            {
                                @(item.FlightTime().TotalHoursWithMinutesAsDecimal());
                            }
                            else
                            {
                                <text><span class="error">Fejl: landing før start</span></text>
                            }
                        }
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @item.StartedFrom.Name
                        @if ((item.LandedOn != null) && (item.LandedOn.Name != item.StartedFrom.Name))
                        {
                            <text>/ </text>
                            @item.LandedOn.Name
                        }
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @Html.Partial("DisplayTemplates/_TachoPartial", item)
                    </td>
                    <td class="hidden-xs">
                        @Html.DisplayFor(modelItem => item.Description, "Description")
                    </td>
                    <td class="hidden-print">
                        @if (Request.IsPilot())
                        {
                            bool isEditable = User.IsEditor();
                            if (item.Date != null && item.Date.AddDays(3) >= DateTime.Now) { isEditable = true; }
                            if (isEditable)
                            {
                                @Html.ActionLink("Rediger", "Edit", "Flight", new { id = item.FlightId }, new { @class = "btn btn-default btn-xs" })
                            }
                        }
                        @Html.ActionLink("Detaljer", "Details", "Flight", new { id = item.FlightId }, new { @class = "btn btn-default btn-xs" })
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p style="color: silver" class="noprint">
        <em>Rettelser kan udføres op til 48 timer efter flyvningen fandt sted.</em>
    </p>
}

<br style="page-break-after: always;"/>

<h2>
    Logbøger / Fly @Model.Date.ToShortDateString() <small>@(Request.IsClub() ? @Request.Club().Name : string.Empty)</small>
</h2>
<div class="row">
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-condensed">
            <thead>
                <tr>
                    <th>
                        Fly
                    </th>
                    <th>
                        Forsæde
                    </th>
                    <th>
                        Antal
                    </th>
                    <th>
                        Flyvetid
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in Model.Flights
                                     group c by new { c.Plane, c.Pilot } into g
                                     select new { Plane = g.Key.Plane, Pilot = g.Key.Pilot, Count = g.Count(), ItemFlights = g })
                {
                    <tr>
                        <td>
                            <span class="hidden-xs">@item.Plane</span>
                            <span class="visible-xs">@item.Plane.CompetitionId</span>
                        </td>
                        <td>
                            @item.Pilot.Name
                        </td>
                        <td align="right">
                            @item.Count
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f=>f.FlightTime().Ticks).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-condensed">
            <thead>
                <tr>
                    <th>
                        Fly
                    </th>
                    <th>
                        Bagsæde
                    </th>
                    <th>
                        Antal
                    </th>
                    <th>
                        Flyvetid
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in Model.Flights
                                     where c.PilotBackseat != null
                                     group c by new { c.Plane, c.PilotBackseat } into g
                                     select new { Plane = g.Key.Plane, PilotBackseat = g.Key.PilotBackseat, Count = g.Count(), ItemFlights = g })
                {
                    <tr>
                        <td>
                            <span class="hidden-xs">@item.Plane</span>
                            <span class="visible-xs">@item.Plane.CompetitionId</span>
                        </td>
                        <td>
                            @item.PilotBackseat.Name
                        </td>
                        <td align="right">
                            @item.Count
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.FlightTime().Ticks).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<h2>
    Logbøger / Piloter @Model.Date.ToShortDateString() <small>@(Request.IsClub() ? @Request.Club().Name : string.Empty)</small>
</h2>
<div class="row">
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-condensed">
            <thead>
                <tr>
                    <th>
                        Forsæde
                    </th>
                    <th>
                        Fly
                    </th>
                    <th>
                        Antal
                    </th>
                    <th>
                        Flyvetid
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in Model.Flights
                                     group c by new { c.Pilot, c.Plane } into g
                                     select new { Pilot = g.Key.Pilot, Plane = g.Key.Plane, Count = g.Count(), ItemFlights = g })
                {
                    <tr>
                        <td>
                            @item.Pilot.Name
                        </td>
                        <td>
                            <span class="hidden-xs">@item.Plane</span>
                            <span class="visible-xs">@item.Plane.CompetitionId</span>
                        </td>
                        <td align="right">
                            @item.Count
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.FlightTime().Ticks).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
</div>
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-condensed">
            <thead>
                <tr>
                    <th>
                        Bagsæde
                    </th>
                    <th>
                        Fly
                    </th>
                    <th>
                        Antal
                    </th>
                    <th>
                        Flyvetid
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in Model.Flights
                                     where c.PilotBackseat != null
                                     group c by new { c.PilotBackseat, c.Plane } into g
                                     select new { PilotBackseat = g.Key.PilotBackseat, Plane = g.Key.Plane, Count = g.Count(), ItemFlights = g })
                {
                    <tr>
                        <td>
                            @item.PilotBackseat.Name
                        </td>
                        <td>
                            <span class="hidden-xs">@item.Plane</span>
                            <span class="visible-xs">@item.Plane.CompetitionId</span>
                        </td>
                        <td align="right">
                            @item.Count
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.FlightTime().Ticks)).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
</div>
</div>
<br />
<p>
    <a href="@Path.Combine(Url.Action("index","Report"), Model.Date.ToString("yyyy"))" class="btn btn-primary">Statistik for @Model.Date.ToString("yyyy")</a>
    <a href="@Path.Combine(Url.Action("index","Report"), Model.Date.ToString("yyyy-MM"))" class="btn btn-primary">Statistik for @Model.Date.ToString("MMMM")</a>
</p>
